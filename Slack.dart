import 'dart:async';
import 'dart:convert';
import "package:http/http.dart" as http;

/// A connection to the Slack API.
class Slack {
    String _token;
	static final String _baseUrl = "https://slack.com/api";
    
	/// Creates a new Slack connection using the given token.
    Slack(String this._token) {
        
    }

	/// Performs a request to the slack web api specified in [api] with the request body [body].
	Future<Map<String, dynamic>> request(String api, Map<String, String> body) async {
		body["token"] = _token;
		http.Response r = await http.post("${_baseUrl}/${api}", body: body);
		return JSON.decode(r.body);
	}

	Future <Map<String, dynamic>> postMessage(String channel, Message message, {bool as_user = false, int thread_ts, bool reply_broadcast = false, String icon_url, String icon_emoji}) {
		Map<String, String> req = message.toMap();
		req["channel"] = channel;
		req["as_user"] = as_user.toString();
		if (thread_ts != null) {
			req["thread_ts"] = thread_ts.toString();
			req["reply_broadcast"] = reply_broadcast.toString();
		}
		if (!as_user) {
			if (icon_url != null) req["icon_url"] = icon_url;
			if (icon_emoji != null) req["icon_emoji"] = icon_emoji;
		}
		return request("chat.postMessage", req);
	}
}

class Message {
	String text;
	List<Attachment> attachments;
	String username;
	String parse;
	bool link_names;
	bool unfurl_links;
	bool unfurl_media;

	Message({String this.text, List<Attachment> this.attachments, String this.username, String this.parse = "none", bool this.link_names = true, bool this.unfurl_links = true, bool this.unfurl_media = true}) {
		attachments ??= new List<Attachment>();
	}

	Map<String, String> toMap() {
		List<String> a = new List<String>();
		attachments.forEach((f) => a.add(f.toJSON()));
		Map<String, String> map = {
			"parse": parse,
			"link_names": link_names.toString(),
			"unfurl_links": unfurl_links.toString(),
			"unfurl_media": unfurl_media.toString()
		};
		if (text != null) map["text"] = text;
		if (attachments.length > 0) map["attachments"] = a.toString();
		if (username != null) map["username"] = username;
		return map;
	}
}

class Attachment {
	String fallback;
	String color;
	String pretext;
	String author_name;
	String author_icon;
	String title;
	String title_link;
	String text;
	List<Field> fields;
	String image_url;
	String thumb_url;
	String footer;
	String footer_icon;
	int ts;
	String callback_id;
	List<Action> actions;
	List<String> mrkdwn_in;

	Attachment(String this.fallback, {String this.color, String this.pretext, String this.author_name, String this.author_icon, String this.title, String this.title_link, String this.text, List<Field> this.fields, String image_url, String this.thumb_url, String this.footer, String this.footer_icon, int this.ts, String this.callback_id, List<Action> this.actions, List<String> this.mrkdwn_in = const ["pretext", "text", "fields"]}) {
		fields ??= new List<Field>();
		actions ??= new List<Action>();
	}

	Map<String, dynamic> toMap() {
		List<Map<String, dynamic>> f = new List<Map<String, dynamic>>();
		fields.forEach((field) => f.add(field.toMap()));
		List<Map<String, dynamic>> a = new List<Map<String, dynamic>>();
		actions.forEach((action) => a.add(action.toMap()));
		Map<String, dynamic> map = {
			"fallback": fallback
		};

		// Don't worry. This block was generated by another dart script using 'dart:mirrors'.
		color != null ? map["color"] = color : null;
		pretext != null ? map["pretext"] = pretext : null;
		author_name != null ? map["author_name"] = author_name : null;
		author_icon != null ? map["author_icon"] = author_icon : null;
		title != null ? map["title"] = title : null;
		title_link != null ? map["title_link"] = title_link : null;
		text != null ? map["text"] = text : null;
		f.length > 0 ? map["fields"] = f : null;
		image_url != null ? map["image_url"] = image_url : null;
		thumb_url != null ? map["thumb_url"] = thumb_url : null;
		footer != null ? map["footer"] = footer : null;
		footer_icon != null ? map["footer_icon"] = footer_icon : null;
		ts != null ? map["ts"] = ts : null;
		callback_id != null ? map["callback_id"] = callback_id : null;
		a.length > 0 ? map["actions"] = a : null;
		mrkdwn_in.length > 0 ? map["mrkdwn_in"] = mrkdwn_in : null;

		return map;
	}

	String toJSON() {
		return JSON.encode(toMap());
	}
}

abstract class Action {
	String name;
	String text;
	String value;
	Confirm confirm;

	Action(String this.name, String this.text, String this.value, {Confirm this.confirm}) {

	}

	Map<String, dynamic> toMap() {
		Map<String, dynamic> map = {
			"name": name,
			"text": text,
			"value": value
		};
		if (confirm != null) map["confirm"] = confirm.toMap();
		return map;
	}
}

class Button extends Action {
	String style;

	Button(String name, String text, String value, {Confirm confirm, String this.style = "default"}): super(name, text, value, confirm: confirm) {}

	@override
	Map<String, dynamic> toMap() {
		Map<String, dynamic> map = super.toMap();
		map["type"] = "button";
		map["style"] = style;
		return map;
	}
}

//TODO Finish implementing Menus
class Menu extends Action {
	List<Map<String, String>> options;

	Menu(String name, String text, String value, {Confirm confirm, String style = "default"}): super(name, text, value, confirm: confirm) {}
}

class Field {
	String title;
	String value;
	bool short;

	Field(String this.title, String this.value, bool this.short) {}

	Map<String, dynamic> toMap() {
		return {
			"title": this.title,
			"value": this.value,
			"short": this.short
		};
	}
}

class Confirm {
	String text;
	String title;
	String ok_text;
	String dismiss_text;

	Confirm(String this.text, String this.title, String this.ok_text, String this.dismiss_text) {}

	Map<String, String> toMap() {
		return {
			"text": text,
			"title": title,
			"ok_text": ok_text,
			"dismiss_text": dismiss_text
		};
	}
}